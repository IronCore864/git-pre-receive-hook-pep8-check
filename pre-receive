#!/usr/bin/env python
import sys
import os
import subprocess

import pep8

# Answer to the Ultimate Question of Life, the Universe, and Everything
EXIT_STATUS = 42

EXEMPT_PATH = [
    'dependency/',
    'migrations'
]

HAS_PY = False


def git(command):
    command.insert(0, 'git')
    p = subprocess.Popen(command,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    pout, perr = p.communicate()
    if p.returncode:
        command_string = ' '.join(command)
        raise OSError('Command "%s" exited with %s! stderr was: %s' %
                      (command_string, p.returncode, perr))
    return pout, perr


def get_refs():
    for line in sys.stdin:
        if not line.strip():
            continue
        old, new, branch = line.split()
    return old, new, branch


def get_sources(new, changed_paths):
    command = 'ls-tree --full-name -r {}'.format(new).split()
    out, _ = git(command)
    for line in out.splitlines():
        if not line.strip():
            continue

        # https://git-scm.com/docs/git-ls-tree#_output_format
        file_info, path = line.split('\t')
        obj = file_info.split()[-1]

        if path not in changed_paths:
            continue

        if [p for p in EXEMPT_PATH if p in path]:
            print('%s: exempted by configuration' % path)
            continue

        _, extension = os.path.splitext(path)
        if not extension.lower().endswith('.py'):
            continue

        HAS_PY = True
        source, _ = git(['cat-file', 'blob', obj])
        yield source, path


def get_pep8_violations(lines):
    checker = pep8.Checker('', lines=lines, reporter=QuietReport)
    checker.check_all()
    return checker.report.get_formatted_error_text()


def get_changed_paths(new):
    command = 'diff-tree --no-commit-id --name-only -r {}'.format(new).split()
    out, _ = git(command)
    print(out)
    return out.splitlines()


def main():
    global EXIT_STATUS
    EXIT_STATUS = 0

    old, new, branch = get_refs()

    if new == '0' * 40:
        return EXIT_STATUS

    changed_paths = get_changed_paths(new)

    for source, path in get_sources(new, changed_paths):
        source = [l + '\n' for l in source.splitlines()]
        violations = get_pep8_violations(source)
        if violations:
            EXIT_STATUS = 2
            print('-' * 80)
            print('PEP8 violations found in: %s' % path)
            print('')
            print(violations)
    if EXIT_STATUS == 0 and HAS_PY:
        print('PEP8 check passed! Good Job!')
    return EXIT_STATUS


class QuietReport(pep8.BaseReport):
    """A Quieter report class. Inspired by autopep8 source.
    """

    def __init__(self, options):
        super(QuietReport, self).__init__(options)
        self.__full_error_results = []

    def error(self, line_number, offset, text, _):
        code = super(QuietReport, self).error(line_number, offset, text, _)
        if code:
            self.__full_error_results.append(
                {'id': code,
                 'line': line_number,
                 'column': offset + 1,
                 'info': text})

    def full_error_results(self):
        return self.__full_error_results

    def get_formatted_error_text(self):
        messages = []
        for error in self.full_error_results():
            message = '%s:%s\t%s' % (error['line'], error['column'],
                                     error['info'])
            messages.append(message)
        return '\n'.join(messages)


if __name__ == '__main__':
    sys.exit(main())
